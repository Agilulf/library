<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">40</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">96e7da23-106f-4265-8b48-b7533ac2730e</dc:identifier>
        <dc:title>Python源码剖析</dc:title>
        <dc:creator opf:file-as="陈儒" opf:role="aut">陈儒</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (3.8.0) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>0101-01-01T00:00:00+00:00</dc:date>
        <dc:description>作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C/C++编写Python的扩展模块，还能将Python嵌入到C/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.
为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..
本书适合于Python程序员、动态语言爱好者、C程序员阅读</dc:description>
        <dc:identifier opf:scheme="DOUBAN">3117898</dc:identifier>
        <dc:language>zh</dc:language>
        <dc:subject>深度探索动态语言核心技术</dc:subject>
        <meta content="{&quot;陈儒&quot;: &quot;&quot;}" name="calibre:author_link_map"/>
        <meta content="8" name="calibre:rating"/>
        <meta content="2017-09-29T03:16:16.091597+00:00" name="calibre:timestamp"/>
        <meta content="Python源码剖析" name="calibre:title_sort"/>
    </metadata>
    <guide>
        <reference href="cover.jpg" title="封面" type="cover"/>
    </guide>
</package>
